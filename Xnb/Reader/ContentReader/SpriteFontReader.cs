// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Numerics;
using CommunityToolkit.HighPerformance.Buffers;
using Xnb.Types;

namespace Xnb.Reader.ContentReader;

public class SpriteFontReader: BaseReader<SpriteFont>
{
    public override SpriteFont Read(BinaryReader buffer)
    {
        var texture = ReaderResolver.Read<Texture2D>(buffer);
        var glyphs = ReaderResolver.Read<MemoryOwner<Rectangle>>(buffer, true);
        var cropping = ReaderResolver.Read<MemoryOwner<Rectangle>>(buffer, true);
        var charMap = ReaderResolver.Read<char[]>(buffer, true);
        var lineSpacing = ReaderResolver.Read<int>(buffer);
        var spacing = ReaderResolver.Read<float>(buffer);
        var kerning = ReaderResolver.Read<Vector3[]>(buffer, true);
        var defaultCharacter = ReaderResolver.Read<char?>(buffer);
        return new SpriteFont(charMap, lineSpacing, spacing, kerning, defaultCharacter) { Data = texture, GlyphsOwner = glyphs, CroppingOwner = cropping };
    }

    public override void Write(BinaryWriter buffer, SpriteFont content)
    {
        ReaderResolver.Write(buffer, content.Data);
        ReaderResolver.Write(buffer, content.Glyphs);
        ReaderResolver.Write(buffer, content.Cropping);
        ReaderResolver.Write(buffer, content.CharMap);
        ReaderResolver.Write(buffer, content.LineSpacing);
        ReaderResolver.Write(buffer, content.Spacing);
        ReaderResolver.Write(buffer, content.Kerning);
        ReaderResolver.Write(buffer, content.DefaultCharacter);
    }
}
