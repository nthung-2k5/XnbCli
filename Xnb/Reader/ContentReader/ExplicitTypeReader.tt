<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
using Xnb.Types;

namespace Xnb.Reader.ContentReader
{
    public abstract class ExplicitReader<T, U>: BaseReader<T> where T: ExplicitType<U>, new()
    {
        public override T Read(BinaryReader buffer)
        {
            return new T { Data = ReaderResolver.Read<U>(buffer) };
        }

        public override void Write(BinaryWriter buffer, T content)
        {
            ReaderResolver.Write(buffer, content.Data);
        }
    }

    public static partial class ReaderResolver
    {
        static partial void RegisterExplicitReaders()
        {
    <#
        var types = new Dictionary<string, string> { ["TBin"] = "byte[]", ["Effect"] = "byte[]" };

        foreach (var type in types)
        {
    #>
            Register(new <#= type.Key #>Reader());
    <#
        }
    #>
            Register(new BmFontReader());
            Register(new Texture2DReader());
            Register(new SpriteFontReader());
        }
    }
<#
    foreach (var type in types)
    {
#>
    public class <#= type.Key #>Reader: ExplicitReader<<#= type.Key #>, <#= type.Value #>>;
<#
    }
#>
    public class BmFontReader: BaseReader<BmFont>
    {
        public override BmFont Read(BinaryReader buffer)
        {
            return new BmFont { Data = buffer.ReadString() };
        }

        public override void Write(BinaryWriter buffer, BmFont content)
        {
            buffer.Write(content.Data);
        }
    }
}

namespace Xnb.Types
{
<#
    foreach (var type in types)
    {
#>
    public record <#= type.Key #>: ExplicitType<<#= type.Value #>>;
<#
    }
#>
    public record BmFont: ExplicitType<string>;
}

